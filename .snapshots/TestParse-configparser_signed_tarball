(parse_test.ParserData) {
  Metadata: (map[string][]string) (len=27) {
    (string) (len=7) ":action": ([]string) (len=1) {
      (string) (len=11) "file_upload"
    },
    (string) (len=6) "author": ([]string) (len=1) {
      (string) (len=13) "Łukasz Langa"
    },
    (string) (len=12) "author_email": ([]string) (len=1) {
      (string) (len=15) "lukasz@langa.pl"
    },
    (string) (len=17) "blake2_256_digest": ([]string) (len=1) {
      (string) (len=24) "blake2_256_digest exists"
    },
    (string) (len=11) "classifiers": ([]string) (len=5) {
      (string) (len=43) "Development Status :: 5 - Production/Stable",
      (string) (len=31) "Intended Audience :: Developers",
      (string) (len=38) "License :: OSI Approved :: MIT License",
      (string) (len=35) "Programming Language :: Python :: 3",
      (string) (len=43) "Programming Language :: Python :: 3 :: Only"
    },
    (string) (len=7) "comment": ([]string) (len=1) {
      (string) ""
    },
    (string) (len=11) "description": ([]string) (len=1) {
      (string) (len=9485) ".. image:: https://img.shields.io/pypi/v/configparser.svg\n   :target: https://pypi.org/project/configparser\n\n.. image:: https://img.shields.io/pypi/pyversions/configparser.svg\n\n.. image:: https://github.com/jaraco/configparser/workflows/tests/badge.svg\n   :target: https://github.com/jaraco/configparser/actions?query=workflow%3A%22tests%22\n   :alt: tests\n\n.. image:: https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/charliermarsh/ruff/main/assets/badge/v2.json\n    :target: https://github.com/astral-sh/ruff\n    :alt: Ruff\n\n.. image:: https://img.shields.io/badge/code%20style-black-000000.svg\n   :target: https://github.com/psf/black\n   :alt: Code style: Black\n\n.. image:: https://readthedocs.org/projects/configparser/badge/?version=latest\n   :target: https://configparser.readthedocs.io/en/latest/?badge=latest\n\n.. image:: https://img.shields.io/badge/skeleton-2023-informational\n   :target: https://blog.jaraco.com/skeleton\n\n.. image:: https://tidelift.com/badges/package/pypi/configparser\n   :target: https://tidelift.com/subscription/pkg/pypi-configparser?utm_source=pypi-configparser&utm_medium=readme\n\n\nThis package is a backport of the refreshed and enhanced ConfigParser from\nlater Python versions. To use the backport instead of the built-in version,\nsimply import it explicitly as a backport::\n\n  from backports import configparser\n\nTo use the backport on Python 2 and the built-in version on\nPython 3, use the standard invocation::\n\n  import configparser\n\nFor detailed documentation consult the vanilla version at\nhttp://docs.python.org/3/library/configparser.html.\n\nWhy you'll love ``configparser``\n================================\n\nWhereas almost completely compatible with its older brother, ``configparser``\nsports a bunch of interesting new features:\n\n* full mapping protocol access (`more info\n  <http://docs.python.org/3/library/configparser.html#mapping-protocol-access>`_)::\n\n    >>> parser = ConfigParser()\n    >>> parser.read_string(\"\"\"\n    [DEFAULT]\n    location = upper left\n    visible = yes\n    editable = no\n    color = blue\n\n    [main]\n    title = Main Menu\n    color = green\n\n    [options]\n    title = Options\n    \"\"\")\n    >>> parser['main']['color']\n    'green'\n    >>> parser['main']['editable']\n    'no'\n    >>> section = parser['options']\n    >>> section['title']\n    'Options'\n    >>> section['title'] = 'Options (editable: %(editable)s)'\n    >>> section['title']\n    'Options (editable: no)'\n\n* there's now one default ``ConfigParser`` class, which basically is the old\n  ``SafeConfigParser`` with a bunch of tweaks which make it more predictable for\n  users. Don't need interpolation? Simply use\n  ``ConfigParser(interpolation=None)``, no need to use a distinct\n  ``RawConfigParser`` anymore.\n\n* the parser is highly `customizable upon instantiation\n  <http://docs.python.org/3/library/configparser.html#customizing-parser-behaviour>`__\n  supporting things like changing option delimiters, comment characters, the\n  name of the DEFAULT section, the interpolation syntax, etc.\n\n* you can easily create your own interpolation syntax but there are two powerful\n  implementations built-in (`more info\n  <http://docs.python.org/3/library/configparser.html#interpolation-of-values>`__):\n\n  * the classic ``%(string-like)s`` syntax (called ``BasicInterpolation``)\n\n  * a new ``${buildout:like}`` syntax (called ``ExtendedInterpolation``)\n\n* fallback values may be specified in getters (`more info\n  <http://docs.python.org/3/library/configparser.html#fallback-values>`__)::\n\n    >>> config.get('closet', 'monster',\n    ...            fallback='No such things as monsters')\n    'No such things as monsters'\n\n* ``ConfigParser`` objects can now read data directly `from strings\n  <http://docs.python.org/3/library/configparser.html#configparser.ConfigParser.read_string>`__\n  and `from dictionaries\n  <http://docs.python.org/3/library/configparser.html#configparser.ConfigParser.read_dict>`__.\n  That means importing configuration from JSON or specifying default values for\n  the whole configuration (multiple sections) is now a single line of code. Same\n  goes for copying data from another ``ConfigParser`` instance, thanks to its\n  mapping protocol support.\n\n* many smaller tweaks, updates and fixes\n\nA few words about Unicode\n=========================\n\n``configparser`` comes from Python 3 and as such it works well with Unicode.\nThe library is generally cleaned up in terms of internal data storage and\nreading/writing files.  There are a couple of incompatibilities with the old\n``ConfigParser`` due to that. However, the work required to migrate is well\nworth it as it shows the issues that would likely come up during migration of\nyour project to Python 3.\n\nThe design assumes that Unicode strings are used whenever possible [1]_.  That\ngives you the certainty that what's stored in a configuration object is text.\nOnce your configuration is read, the rest of your application doesn't have to\ndeal with encoding issues. All you have is text [2]_. The only two phases when\nyou should explicitly state encoding is when you either read from an external\nsource (e.g. a file) or write back.\n\nVersioning\n==========\n\nThis project uses `semver <https://semver.org/spec/v2.0.0.html>`_ to\ncommunicate the impact of various releases while periodically syncing\nwith the upstream implementation in CPython.\nThe `history <https://configparser.readthedocs.io/en/latest/history.html>`_\nserves as a reference indicating which versions incorporate\nwhich upstream functionality.\n\nPrior to the ``4.0.0`` release, `another scheme\n<https://github.com/jaraco/configparser/blob/3.8.1/README.rst#versioning>`_\nwas used to associate the CPython and backports releases.\n\nMaintenance\n===========\n\nThis backport was originally authored by Łukasz Langa, the current vanilla\n``configparser`` maintainer for CPython and is currently maintained by\nJason R. Coombs:\n\n* `configparser repository <https://github.com/jaraco/configparser>`_\n\n* `configparser issue tracker <https://github.com/jaraco/configparser/issues>`_\n\nConversion Process\n==================\n\nThis section is technical and should bother you only if you are wondering how\nthis backport is produced. If the implementation details of this backport are\nnot important for you, feel free to ignore the following content.\n\nThe project takes the following branching approach:\n\n* The ``3.x`` branch holds unchanged files synchronized from the upstream\n  CPython repository. The synchronization is currently done by manually copying\n  the required files and stating from which CPython changeset they come.\n\n* The ``main`` branch holds a version of the ``3.x`` code with some tweaks\n  that make it compatible with older Pythons. Code on this branch must work\n  on all supported Python versions. Test with ``tox`` or in CI.\n\nThe process works like this:\n\n1. In the ``3.x`` branch, run ``pip-run -- sync-upstream.py``, which\n   downloads the latest stable release of Python and copies the relevant\n   files from there into their new locations and then commits those\n   changes with a nice reference to the relevant upstream commit hash.\n\n2. Check for new names in ``__all__`` and update imports in\n   ``configparser.py`` accordingly. Commit.\n\n3. Merge the new commit to ``main``. Run tests. Commit.\n\n4. Make any compatibility changes on ``main``. Run tests. Commit.\n\n5. Update the docs and release the new version.\n\n\nFootnotes\n=========\n\n.. [1] To somewhat ease migration, passing bytestrings is still supported but\n       they are converted to Unicode for internal storage anyway. This means\n       that for the vast majority of strings used in configuration files, it\n       won't matter if you pass them as bytestrings or Unicode. However, if you\n       pass a bytestring that cannot be converted to Unicode using the naive\n       ASCII codec, a ``UnicodeDecodeError`` will be raised. This is purposeful\n       and helps you manage proper encoding for all content you store in\n       memory, read from various sources and write back.\n\n.. [2] Life gets much easier when you understand that you basically manage\n       **text** in your application.  You don't care about bytes but about\n       letters.  In that regard the concept of content encoding is meaningless.\n       The only time when you deal with raw bytes is when you write the data to\n       a file.  Then you have to specify how your text should be encoded.  On\n       the other end, to get meaningful text from a file, the application\n       reading it has to know which encoding was used during its creation.  But\n       once the bytes are read and properly decoded, all you have is text.  This\n       is especially powerful when you start interacting with multiple data\n       sources.  Even if each of them uses a different encoding, inside your\n       application data is held in abstract text form.  You can program your\n       business logic without worrying about which data came from which source.\n       You can freely exchange the data you store between sources.  Only\n       reading/writing files requires encoding your text to bytes.\n\nFor Enterprise\n==============\n\nAvailable as part of the Tidelift Subscription.\n\nThis project and the maintainers of thousands of other packages are working with Tidelift to deliver one enterprise subscription that covers all of the open source you use.\n\n`Learn more <https://tidelift.com/subscription/pkg/pypi-configparser?utm_source=pypi-configparser&utm_medium=referral&utm_campaign=github>`_.\n"
    },
    (string) (len=24) "description_content_type": ([]string) (len=1) {
      (string) ""
    },
    (string) (len=12) "download_url": ([]string) (len=1) {
      (string) ""
    },
    (string) (len=8) "filetype": ([]string) (len=1) {
      (string) (len=5) "sdist"
    },
    (string) (len=9) "home_page": ([]string) (len=1) {
      (string) (len=39) "https://github.com/jaraco/configparser/"
    },
    (string) (len=8) "keywords": ([]string) (len=1) {
      (string) (len=52) "configparser ini parsing conf cfg configuration file"
    },
    (string) (len=7) "license": ([]string) (len=1) {
      (string) ""
    },
    (string) (len=10) "maintainer": ([]string) (len=1) {
      (string) (len=15) "Jason R. Coombs"
    },
    (string) (len=16) "maintainer_email": ([]string) (len=1) {
      (string) (len=17) "jaraco@jaraco.com"
    },
    (string) (len=10) "md5_digest": ([]string) (len=1) {
      (string) (len=17) "md5_digest exists"
    },
    (string) (len=16) "metadata_version": ([]string) (len=1) {
      (string) (len=3) "2.1"
    },
    (string) (len=4) "name": ([]string) (len=1) {
      (string) (len=12) "configparser"
    },
    (string) (len=8) "platform": ([]string) (len=1) {
      (string) (len=3) "any"
    },
    (string) (len=16) "protocol_version": ([]string) (len=1) {
      (string) (len=1) "1"
    },
    (string) (len=15) "provides_extras": ([]string) (len=2) {
      (string) (len=7) "testing",
      (string) (len=4) "docs"
    },
    (string) (len=9) "pyversion": ([]string) (len=1) {
      (string) ""
    },
    (string) (len=13) "requires_dist": ([]string) (len=15) {
      (string) (len=29) "pytest>=6; extra == \"testing\"",
      (string) (len=41) "pytest-checkdocs>=2.4; extra == \"testing\"",
      (string) (len=84) "pytest-black>=0.3.7; platform_python_implementation != \"PyPy\" and extra == \"testing\"",
      (string) (len=30) "pytest-cov; extra == \"testing\"",
      (string) (len=83) "pytest-mypy>=0.9.1; platform_python_implementation != \"PyPy\" and extra == \"testing\"",
      (string) (len=39) "pytest-enabler>=2.2; extra == \"testing\"",
      (string) (len=31) "pytest-ruff; extra == \"testing\"",
      (string) (len=35) "types-backports; extra == \"testing\"",
      (string) (len=28) "sphinx>=3.5; extra == \"docs\"",
      (string) (len=29) "sphinx<7.2.5; extra == \"docs\"",
      (string) (len=38) "jaraco.packaging>=9.3; extra == \"docs\"",
      (string) (len=32) "rst.linker>=1.9; extra == \"docs\"",
      (string) (len=21) "furo; extra == \"docs\"",
      (string) (len=28) "sphinx-lint; extra == \"docs\"",
      (string) (len=37) "jaraco.tidelift>=1.4; extra == \"docs\""
    },
    (string) (len=15) "requires_python": ([]string) (len=1) {
      (string) (len=5) ">=3.8"
    },
    (string) (len=13) "sha256_digest": ([]string) (len=1) {
      (string) (len=20) "sha256_digest exists"
    },
    (string) (len=7) "summary": ([]string) (len=1) {
      (string) (len=53) "Updated configparser from stdlib for earlier Pythons."
    },
    (string) (len=7) "version": ([]string) (len=1) {
      (string) (len=14) "version exists"
    }
  },
  GpgSignature: ([]uint8) (len=20) {
    00000000  47 50 47 20 73 69 67 6e  61 74 75 72 65 20 65 78  |GPG signature ex|
    00000010  69 73 74 73                                       |ists|
  }
}
